// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id            String             @id @default(uuid())
  name          String
  slug          String             @unique
  users         User[]
  recruiters    RecruiterProfile[]
  candidates    Candidate[]
  subscriptions Subscription[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  @@map("companies")
}

enum Role {
  ADMIN
  RECRUITER
}

enum CandidateSource {
  MANUAL
  UPLOAD
  DRIVE
  CSV
  EXCEL
  AIRTABLE
  GOOGLE_SHEETS
  ADMIN_ASSIGN
}

enum SkillCategory {
  LANG
  FRAMEWORK
  DB
  CLOUD
  TOOL
  SOFT
  CERT
  DOMAIN
}

enum AppStatus {
  NEW
  SCREENING
  INTERVIEW
  OFFER
  HIRED
  REJECTED
}

model User {
  id                        String               @id @default(uuid())
  email                     String               @unique
  hash                      String?
  name                      String?
  role                      Role
  companyId                 String?
  company                   Company?             @relation(fields: [companyId], references: [id])
  status                    UserStatus?
  recruiter                 RecruiterProfile?
  oauth                     OAuthToken[]
  candidates                Candidate[]          @relation("OwnerRecruiter")
  assignedCandidates        Assignment[]         @relation("AssignedToRecruiter")
  assignedByAdmin           Assignment[]         @relation("AssignedByAdmin")
  assignedCandidatesByAdmin Candidate[]          @relation("AssignedByAdmin")
  applications              Application[]
  Job                       Job[]
  importSources             ImportSource[]
  importJobs                ImportJob[]          @relation("UserImportJobs")
  auditLogs                 AuditLog[]           @relation("ActorUser")
  notifications             Notification[]
  subscriptions             Subscription[]
  passwordResetTokens       PasswordResetToken[]
  refreshTokens             RefreshToken[]
  createdAt                 DateTime             @default(now())
  updatedAt                 DateTime             @updatedAt
  deletedAt                 DateTime?

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("refresh_tokens")
}

model UserStatus {
  userId          String    @id
  isBlocked       Boolean   @default(false)
  isDeleted       Boolean   @default(false)
  restrictedUntil DateTime?
  notes           String?
  user            User      @relation(fields: [userId], references: [id])

  @@map("user_statuses")
}

model RecruiterProfile {
  id             String          @id @default(uuid())
  userId         String          @unique
  companyId      String?
  driveConnected Boolean         @default(false)
  driveFolderId  String?
  notifyEmail    String?
  user           User            @relation(fields: [userId], references: [id])
  company        Company?        @relation(fields: [companyId], references: [id])
  pipelineStages PipelineStage[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@map("recruiter_profiles")
}

model Candidate {
  id                String                   @id @default(uuid())
  companyId         String?
  ownerRecruiterId  String // User.id (role: RECRUITER)
  assignedByAdminId String?
  firstName         String
  lastName          String
  email             String?
  phone             String?
  location          String?
  experienceLevel   String?
  headline          String?
  summary           String?
  source            CandidateSource
  searchVector      Unsupported("tsvector")?
  company           Company?                 @relation(fields: [companyId], references: [id])
  ownerRecruiter    User                     @relation("OwnerRecruiter", fields: [ownerRecruiterId], references: [id])
  assignedByAdmin   User?                    @relation("AssignedByAdmin", fields: [assignedByAdminId], references: [id])
  assignments       Assignment[]             @relation("AssignedCandidate")
  documents         CandidateDocument[]
  skills            CandidateSkill[]
  applications      Application[]
  claimedYoe        Int?
  experiences       Experience[]
  deletedAt         DateTime?
  blacklists        Blacklist[]
  JobApplication    JobApplication[]
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt

  @@index([ownerRecruiterId])
  @@index([companyId])
  @@index([searchVector], type: Gin)
  @@map("candidates")
}

model CandidateDocument {
  id            String    @id @default(uuid())
  candidateId   String
  storageKey    String
  mimeType      String
  originalName  String
  size          Int
  textExtracted String?
  parsedAt      DateTime?
  candidate     Candidate @relation(fields: [candidateId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("candidate_documents")
}

model Skill {
  id         String           @id @default(uuid())
  slug       String           @unique
  label      String
  category   SkillCategory
  candidates CandidateSkill[]
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  @@map("skills")
}

model CandidateSkill {
  candidateId String
  skillId     String
  proficiency Int?
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  skill       Skill     @relation(fields: [skillId], references: [id])
  createdAt   DateTime  @default(now())

  @@id([candidateId, skillId])
  @@map("candidate_skills")
}

model Application {
  id          String             @id @default(uuid())
  candidateId String
  recruiterId String
  jobTitle    String
  companyName String
  status      AppStatus          @default(NEW)
  candidate   Candidate          @relation(fields: [candidateId], references: [id])
  recruiter   User               @relation(fields: [recruiterId], references: [id])
  stages      ApplicationStage[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@map("applications")
}

// New Job model for recruiter-managed postings
model Job {
  id               String           @id @default(uuid())
  ownerRecruiterId String
  title            String
  description      String?
  location         String?
  seniority        String?
  status           String           @default("ACTIVE") // ACTIVE|DRAFT|CLOSED
  applications     JobApplication[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  ownerRecruiter User @relation(fields: [ownerRecruiterId], references: [id])

  @@index([ownerRecruiterId, status])
  @@map("jobs")
}

// Link candidates to jobs without altering existing Application model
model JobApplication {
  id          String   @id @default(uuid())
  jobId       String
  candidateId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  job       Job       @relation(fields: [jobId], references: [id])
  candidate Candidate @relation(fields: [candidateId], references: [id])

  @@unique([jobId, candidateId])
  @@index([jobId])
  @@index([candidateId])
  @@map("job_applications")
}

model PipelineStage {
  id           String             @id @default(uuid())
  recruiterId  String
  name         String
  order        Int
  recruiter    RecruiterProfile   @relation(fields: [recruiterId], references: [id])
  applications ApplicationStage[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  @@map("pipeline_stages")
}

model ApplicationStage {
  id            String        @id @default(uuid())
  applicationId String
  stageId       String
  application   Application   @relation(fields: [applicationId], references: [id])
  stage         PipelineStage @relation(fields: [stageId], references: [id])
  enteredAt     DateTime      @default(now())

  @@map("application_stages")
}

// Work experiences to compute actual YOE
model Experience {
  id          String    @id @default(uuid())
  candidateId String
  title       String
  company     String
  startDate   DateTime
  endDate     DateTime?
  candidate   Candidate @relation(fields: [candidateId], references: [id])

  @@index([candidateId])
  @@map("experiences")
}

model Notification {
  id        String    @id @default(uuid())
  userId    String
  type      String
  payload   Json
  readAt    DateTime?
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())

  @@map("notifications")
}

model Assignment {
  id                    String    @id @default(uuid())
  candidateId           String
  assignedToRecruiterId String
  assignedByAdminId     String
  candidate             Candidate @relation("AssignedCandidate", fields: [candidateId], references: [id])
  assignedToRecruiter   User      @relation("AssignedToRecruiter", fields: [assignedToRecruiterId], references: [id])
  assignedByAdmin       User      @relation("AssignedByAdmin", fields: [assignedByAdminId], references: [id])
  createdAt             DateTime  @default(now())

  @@map("assignments")
}

model AuditLog {
  id          String   @id @default(uuid())
  actorUserId String
  action      String
  entity      String
  entityId    String
  meta        Json
  actor       User     @relation("ActorUser", fields: [actorUserId], references: [id])
  createdAt   DateTime @default(now())

  @@map("audit_logs")
}

model OAuthToken {
  id           String    @id @default(uuid())
  userId       String
  provider     String // "google"
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  user         User      @relation(fields: [userId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("oauth_tokens")
}

enum ImportKind {
  GOOGLE_DRIVE
  AIRTABLE
  GOOGLE_SHEETS
  CSV
  EXCEL
}

model ImportSource {
  id          String      @id @default(uuid())
  userId      String
  kind        ImportKind
  externalKey String? // sheet id / base id / table id / folder id
  meta        Json?
  user        User        @relation(fields: [userId], references: [id])
  jobs        ImportJob[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("import_sources")
}

enum JobStatus {
  PENDING
  RUNNING
  FAILED
  COMPLETED
}

model ImportJob {
  id          String       @id @default(uuid())
  sourceId    String
  userId      String
  status      JobStatus    @default(PENDING)
  counts      Json?
  error       String?
  source      ImportSource @relation(fields: [sourceId], references: [id])
  user        User         @relation("UserImportJobs", fields: [userId], references: [id])
  createdAt   DateTime     @default(now())
  completedAt DateTime?

  @@map("import_jobs")
}

// Blacklist entries for candidates
model Blacklist {
  id          String    @id @default(uuid())
  candidateId String
  reason      String
  createdAt   DateTime  @default(now())
  candidate   Candidate @relation(fields: [candidateId], references: [id])

  @@index([candidateId])
  @@map("blacklists")
}

// Matching weights per tenant (company)
model MatchWeights {
  tenantId     String   @id
  skillsWeight Float    @default(0.6)
  yoeWeight    Float    @default(0.3)
  eduWeight    Float    @default(0.1)
  updatedAt    DateTime @updatedAt

  @@map("match_weights")
}

model Subscription {
  id          String    @id @default(uuid())
  companyId   String?
  userId      String?
  planId      String
  status      String // active, past_due, canceled
  trialEndsAt DateTime?
  renewsAt    DateTime?
  company     Company?  @relation(fields: [companyId], references: [id])
  user        User?     @relation(fields: [userId], references: [id])
  plan        Plan      @relation(fields: [planId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("subscriptions")
}

model Plan {
  id            String         @id @default(uuid())
  name          String         @unique
  priceCents    Int
  trialDays     Int            @default(14)
  features      Json
  subscriptions Subscription[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("plans")
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@map("password_reset_tokens")
}
