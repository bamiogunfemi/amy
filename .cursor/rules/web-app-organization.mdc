---
title: Web App Folder Organization & Cleanup Standards
description: Standards for a clean, DRY, production-ready React app in a pnpm monorepo (apps/web), aligned to the refactored, config-driven Landing Page.
alwaysApply: true

---


## Overview

This rule establishes standards for maintaining a clean, production‑ready React web application within a **pnpm workspace monorepo**. It aligns with the **DRY, config‑driven Landing Page** (small primitives + mapped content) and focuses on file organization, cleanup, and deployment optimization for the `apps/web/` folder.

## Essential File Structure

### Required Files (Keep These)

```bash [tree]
apps/web/
├── src/
│   ├── components/
│   │   ├── LandingPage.tsx
│   │   ├── Header.tsx
│   │   ├── Hero.tsx
│   │   ├── FeaturesGrid.tsx
│   │   ├── PricingSection.tsx
│   │   └── Footer.tsx
│   ├── main.tsx
│   ├── index.css
│   ├── vite-env.d.ts
│   └── routeTree.gen.ts
├── package.json
├── vercel.json
├── eslint.config.js
├── vite.config.ts
├── tsconfig.json
├── tailwind.config.js
├── postcss.config.js
└── index.html
```

### Files to Remove (Unnecessary)

::alert{type="warning"}
- `Dockerfile` — Not needed for Vercel deployment
- `nginx.conf` — Not needed for Vercel deployment
- `eslint.config.cjs` — Duplicate of `eslint.config.js`
- `tsconfig.tsbuildinfo` — Build artifact (regenerated)
- `.turbo/` — Build cache (regenerated)
- `dist/` — Build output (regenerated)
::

## Code Quality Standards

### Component Composition & DRY Principles

- **Use configuration objects** (arrays for nav links, features, pricing, footer) instead of repeating JSX.
- **Small primitives**: Extract reusable parts (`Section`, `FeatureCard`, `PricingCard`, `FooterColumn`) for readability and consistency.
- **Single responsibility**: Each component in its own file.

### No Unnecessary Comments

```tsx
// ❌ Bad — Remove JSX section comments
{/* Header */}
<header>...</header>

// ✅ Good — Self-documenting structure
<header>...</header>
```

### Environment Variables Usage

```tsx
// ❌ Bad — Hardcoded URLs
<a href="http://localhost:5174/signup">Sign Up</a>

// ✅ Good — Environment variables
<a href={`${import.meta.env.VITE_DASHBOARD_URL}/signup`}>Sign Up</a>
```

### TypeScript Environment Definitions

```ts [apps/web/src/vite-env.d.ts]
interface ImportMetaEnv {
  readonly VITE_API_URL: string;
  readonly VITE_APP_NAME: string;
  readonly VITE_DASHBOARD_URL: string;
}

interface ImportMeta {
  readonly env: ImportMetaEnv;
}
```

## Monorepo Integration

### Package.json Scripts

```jsonc
{
  "scripts": {
    "dev": "vite",
    "build": "pnpm -C ../../packages/ui build && tsc -b && vite build",
    "preview": "vite preview",
    "type-check": "tsc --noEmit",
    "lint": "eslint src"
  }
}
```

### Workspace Dependencies

```jsonc
{
  "dependencies": {
    "@amy/ui": "workspace:*",
    "@tanstack/react-router": "^1.16.0",
    "@tanstack/react-query": "^5.17.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "lucide-react": "^0.294.0"
  }
}
```

### ESLint Configuration

```js [apps/web/eslint.config.js]
import baseConfig from "../../packages/config/eslint.config.js";
export default baseConfig;
```

## Component Organization

### Landing Page Structure

```tsx [apps/web/src/components/LandingPage.tsx]
import { Header } from "./Header";
import { Hero } from "./Hero";
import { FeaturesGrid } from "./FeaturesGrid";
import { PricingSection } from "./PricingSection";
import { Footer } from "./Footer";

export function LandingPage() {
  return (
    <div className="min-h-screen bg-background">
      <Header />
      <Hero />
      <FeaturesGrid />
      <PricingSection />
      <Footer />
    </div>
  );
}
```

## Build Configuration

### Vite Configuration

```ts [apps/web/vite.config.ts]
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
  build: {
    outDir: "dist",
    sourcemap: true,
  },
});
```

### Vercel Configuration

```json [apps/web/vercel.json]
{
  "buildCommand": "pnpm build",
  "outputDirectory": "dist",
  "framework": "vite",
  "installCommand": "pnpm install",
  "devCommand": "pnpm dev",
  "rewrites": [
    { "source": "/(.*)", "destination": "/index.html" }
  ],
  "headers": [
    {
      "source": "/assets/(.*)",
      "headers": [
        { "key": "Cache-Control", "value": "public, max-age=31536000, immutable" }
      ]
    }
  ]
}
```

## Quality Assurance

### Pre‑commit Checklist

- ✅ **No unnecessary files** — Remove Docker, nginx, duplicates
- ✅ **No hardcoded URLs** — Use environment variables
- ✅ **DRY principles applied** — Config‑driven components, no repeated JSX
- ✅ **Proper TypeScript types** — All env vars defined
- ✅ **Lint passes** — `pnpm lint` succeeds
- ✅ **Build succeeds** — `pnpm build` works
- ✅ **Workspace dependencies** — Proper monorepo imports

### Environment Variables

```bash [.env]
# Local development
VITE_API_URL=http://localhost:3001
VITE_APP_NAME=Amy
VITE_DASHBOARD_URL=http://localhost:5174

# Production (Vercel)
VITE_API_URL=https://your-api.vercel.app
VITE_APP_NAME=Amy
VITE_DASHBOARD_URL=https://your-dashboard.vercel.app
```

## File Naming Conventions

### Components

- **PascalCase**: `LandingPage.tsx`, `Header.tsx`, `Hero.tsx`, etc.
- **Descriptive names**: Clear purpose indication
- **Single responsibility**: One component per file
- **Index pattern**: For grouped exports, use `index.ts` in component folders

### Configuration Files

- **kebab-case**: `vite.config.ts`, `tailwind.config.js`
- **Standard names**: Follow framework conventions
- **No duplicates**: Single config file per tool

## Deployment Optimization

### Vercel‑Specific

- **No Docker files** — Vercel handles containerization
- **No nginx config** — Vercel handles routing
- **Optimized build** — Fast build times
- **Environment variables** — Configurable per environment

### Build Artifacts

- **Remove generated files** — `dist/`, `.turbo/`, `tsconfig.tsbuildinfo`
- **Clean source directory** — Only source files
- **Git ignore patterns** — Proper `.gitignore` setup

## Maintenance Standards

### Regular Cleanup

1. Remove unused imports — Keep dependencies minimal
2. Update environment types — Add new env vars to `vite-env.d.ts`
3. Check for duplicates — Single config files only
4. Validate build process — Ensure monorepo build order
5. Test deployment — Verify Vercel deployment works

### Code Review Checklist

- [ ] No unnecessary comments
- [ ] DRY principles respected
- [ ] Environment variables used correctly
- [ ] TypeScript types defined
- [ ] No hardcoded URLs
- [ ] Proper workspace imports
- [ ] Clean file structure
- [ ] Build artifacts removed

**Remember:** Keep it minimal, clean, DRY, and production‑ready. Every file should have a clear purpose and contribute to the application's functionality.
